// This code was generated by `SqlHydra.Npgsql` -- v2.3.1.0.
namespace CardManagement.Database


[<AutoOpen>]
module ColumnReaders =
    type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
            member __.Name = column
            member __.IsNull() = getOrdinal column |> reader.IsDBNull
            override __.ToString() = __.Name

    type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

    type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> None
                | o -> Some (getter o)

[<AutoOpen>]
module private DataReaderExtensions =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) = 
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime
    
    type System.Data.Common.DbDataReader with
        member reader.GetTimeOnly(ordinal: int) = 
            reader.GetFieldValue(ordinal) |> System.TimeOnly.FromTimeSpan
        

module ``public`` =
    type typeofcard =
        | basic = 1
        | priority = 2

    type statusofcard =
        | activate = 1
        | deactivate = 2

    [<CLIMutable>]
    type cards =
        { [<SqlHydra.ProviderDbType("Uuid")>]
          id: System.Guid
          [<SqlHydra.ProviderDbType("Bigint")>]
          code: int64
          [<SqlHydra.ProviderDbType("Integer")>]
          cvv: int
          [<SqlHydra.ProviderDbType("Uuid")>]
          user_id: System.Guid
          [<SqlHydra.ProviderDbType("Integer")>]
          balance: int
          [<SqlHydra.ProviderDbType("Date")>]
          life_time: System.DateOnly
          type_card: typeofcard
          status: statusofcard }

    let cards = SqlHydra.Query.Table.table<cards>

    [<CLIMutable>]
    type schemaversions =
        { [<SqlHydra.ProviderDbType("Integer")>]
          schemaversionsid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          scriptname: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          applied: System.DateTime }

    let schemaversions = SqlHydra.Query.Table.table<schemaversions>

    [<CLIMutable>]
    type transactions =
        { [<SqlHydra.ProviderDbType("Uuid")>]
          id: System.Guid
          [<SqlHydra.ProviderDbType("Uuid")>]
          card_id: System.Guid
          [<SqlHydra.ProviderDbType("Date")>]
          create_date: System.DateOnly
          [<SqlHydra.ProviderDbType("Integer")>]
          sum: int
          [<SqlHydra.ProviderDbType("Uuid")>]
          to_user_id: System.Guid
          [<SqlHydra.ProviderDbType("Varchar")>]
          message: string }

    let transactions = SqlHydra.Query.Table.table<transactions>

    [<CLIMutable>]
    type users =
        { [<SqlHydra.ProviderDbType("Uuid")>]
          id: System.Guid
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          surname: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          patronymic: string
          [<SqlHydra.ProviderDbType("Integer")>]
          age: int
          [<SqlHydra.ProviderDbType("Integer")>]
          salary: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          email: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          password: string }

    let users = SqlHydra.Query.Table.table<users>

    module Readers =
        type cardsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "id")
            member __.code = RequiredColumn(reader, getOrdinal, reader.GetInt64, "code")
            member __.cvv = RequiredColumn(reader, getOrdinal, reader.GetInt32, "cvv")
            member __.user_id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "user_id")
            member __.balance = RequiredColumn(reader, getOrdinal, reader.GetInt32, "balance")
            member __.life_time = RequiredColumn(reader, getOrdinal, reader.GetDateOnly, "life_time")
            member __.type_card = RequiredColumn(reader, getOrdinal, reader.GetFieldValue, "type_card")
            member __.status = RequiredColumn(reader, getOrdinal, reader.GetFieldValue, "status")

            member __.Read() =
                { cards.id = __.id.Read()
                  code = __.code.Read()
                  cvv = __.cvv.Read()
                  user_id = __.user_id.Read()
                  balance = __.balance.Read()
                  life_time = __.life_time.Read()
                  type_card = __.type_card.Read()
                  status = __.status.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type schemaversionsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.schemaversionsid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "schemaversionsid")
            member __.scriptname = RequiredColumn(reader, getOrdinal, reader.GetString, "scriptname")
            member __.applied = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "applied")

            member __.Read() =
                { schemaversions.schemaversionsid = __.schemaversionsid.Read()
                  scriptname = __.scriptname.Read()
                  applied = __.applied.Read() }

            member __.ReadIfNotNull() =
                if __.schemaversionsid.IsNull() then None else Some(__.Read())

        type transactionsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "id")
            member __.card_id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "card_id")
            member __.create_date = RequiredColumn(reader, getOrdinal, reader.GetDateOnly, "create_date")
            member __.sum = RequiredColumn(reader, getOrdinal, reader.GetInt32, "sum")
            member __.to_user_id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "to_user_id")
            member __.message = RequiredColumn(reader, getOrdinal, reader.GetString, "message")

            member __.Read() =
                { transactions.id = __.id.Read()
                  card_id = __.card_id.Read()
                  create_date = __.create_date.Read()
                  sum = __.sum.Read()
                  to_user_id = __.to_user_id.Read()
                  message = __.message.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type usersReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "id")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.surname = RequiredColumn(reader, getOrdinal, reader.GetString, "surname")
            member __.patronymic = RequiredColumn(reader, getOrdinal, reader.GetString, "patronymic")
            member __.age = RequiredColumn(reader, getOrdinal, reader.GetInt32, "age")
            member __.salary = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salary")
            member __.email = RequiredColumn(reader, getOrdinal, reader.GetString, "email")
            member __.password = RequiredColumn(reader, getOrdinal, reader.GetString, "password")

            member __.Read() =
                { users.id = __.id.Read()
                  name = __.name.Read()
                  surname = __.surname.Read()
                  patronymic = __.patronymic.Read()
                  age = __.age.Read()
                  salary = __.salary.Read()
                  email = __.email.Read()
                  password = __.password.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

type HydraReader(reader: Npgsql.NpgsqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazypubliccards = lazy (``public``.Readers.cardsReader (reader, buildGetOrdinal 8))
    let lazypublicschemaversions = lazy (``public``.Readers.schemaversionsReader (reader, buildGetOrdinal 3))
    let lazypublictransactions = lazy (``public``.Readers.transactionsReader (reader, buildGetOrdinal 6))
    let lazypublicusers = lazy (``public``.Readers.usersReader (reader, buildGetOrdinal 8))
    member __.``public.cards`` = lazypubliccards.Value
    member __.``public.schemaversions`` = lazypublicschemaversions.Value
    member __.``public.transactions`` = lazypublictransactions.Value
    member __.``public.users`` = lazypublicusers.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "public.cards", false -> __.``public.cards``.Read >> box
        | "public.cards", true -> __.``public.cards``.ReadIfNotNull >> box
        | "public.schemaversions", false -> __.``public.schemaversions``.Read >> box
        | "public.schemaversions", true -> __.``public.schemaversions``.ReadIfNotNull >> box
        | "public.transactions", false -> __.``public.transactions``.Read >> box
        | "public.transactions", true -> __.``public.transactions``.ReadIfNotNull >> box
        | "public.users", false -> __.``public.users``.Read >> box
        | "public.users", true -> __.``public.users``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Npgsql.NpgsqlDataReader, isOpt: bool) =
        let wrap get (ord: int) = 
            if isOpt 
            then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            else get ord |> box 
        

        if t = typedefof<bool> then Some(wrap reader.GetBoolean)
        else if t = typedefof<bool []> then Some(wrap reader.GetFieldValue<bool []>)
        else if t = typedefof<int16> then Some(wrap reader.GetInt16)
        else if t = typedefof<int16 []> then Some(wrap reader.GetFieldValue<int16 []>)
        else if t = typedefof<int> then Some(wrap reader.GetInt32)
        else if t = typedefof<int []> then Some(wrap reader.GetFieldValue<int []>)
        else if t = typedefof<int64> then Some(wrap reader.GetInt64)
        else if t = typedefof<int64 []> then Some(wrap reader.GetFieldValue<int64 []>)
        else if t = typedefof<double> then Some(wrap reader.GetDouble)
        else if t = typedefof<double []> then Some(wrap reader.GetFieldValue<double []>)
        else if t = typedefof<decimal> then Some(wrap reader.GetDecimal)
        else if t = typedefof<decimal []> then Some(wrap reader.GetFieldValue<decimal []>)
        else if t = typedefof<string> then Some(wrap reader.GetString)
        else if t = typedefof<string []> then Some(wrap reader.GetFieldValue<string []>)
        else if t = typedefof<System.Guid> then Some(wrap reader.GetGuid)
        else if t = typedefof<System.Guid []> then Some(wrap reader.GetFieldValue<System.Guid []>)
        else if t = typedefof<System.TimeSpan> then Some(wrap reader.GetTimeSpan)
        else if t = typedefof<System.TimeSpan []> then Some(wrap reader.GetFieldValue<System.TimeSpan []>)
        else if t = typedefof<System.DateOnly> then Some(wrap reader.GetDateOnly)
        else if t = typedefof<System.DateOnly []> then Some(wrap reader.GetFieldValue<System.DateOnly []>)
        else if t = typedefof<System.TimeOnly> then Some(wrap reader.GetTimeOnly)
        else if t = typedefof<System.TimeOnly []> then Some(wrap reader.GetFieldValue<System.TimeOnly []>)
        else if t = typedefof<System.DateTime> then Some(wrap reader.GetDateTime)
        else if t = typedefof<System.DateTime []> then Some(wrap reader.GetFieldValue<System.DateTime []>)
        else if t = typedefof<byte []> then Some(wrap reader.GetFieldValue<byte []>)
        else if t = typedefof<char> then Some(wrap reader.GetChar)
        else if t = typedefof<char []> then Some(wrap reader.GetFieldValue<char []>)
        else None

    static member Read(reader: Npgsql.NpgsqlDataReader) = 
        let hydra = HydraReader(reader)
                    
        let getOrdinalAndIncrement() = 
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal
            
        let buildEntityReadFn (t: System.Type) = 
            let t, isOpt = 
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> 
                then t.GenericTypeArguments.[0], true
                else t, false
            
            match HydraReader.GetPrimitiveReader(t, reader, isOpt) with
            | Some primitiveReader -> 
                let ord = getOrdinalAndIncrement()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])
                let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                hydra.GetReaderByName(schemaAndType, isOpt)
            
        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>
        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> 
                readEntityFn() :?> 'T
        
